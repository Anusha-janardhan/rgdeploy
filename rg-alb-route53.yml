Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPC
          - PublicSubnet1
          - PublicSubnet2
          - PublicSubnet3
      - Label:
          default: Certificate of your domain
        Parameters:
          - CertificateArn
         
Parameters: 
  VPC:
    Description: The vpc to launch the service
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Description: The subnet where to launch the service
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: The subnet where to launch the service
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3:
    Description: The subnet where to launch the service
    Type: AWS::EC2::Subnet::Id
  CertificateArn:
    Description: Provide your certificate Arn to Research Gateway application available securely over SSL or leave it blank(optional)
    Default: ""
    Type: String

Conditions: 
  securecommunication: !Not [!Equals [!Ref CertificateArn, ""]]
  nonsecurecommunication: !Equals [!Ref CertificateArn, ""]
Resources:
  RGInstanceSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
    GroupDescription: Allow http to client host
    VpcId: !Ref VPC
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  RGApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "RG-Application-Load-Balancer"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
              - !Ref PublicSubnet3
            SecurityGroups:
              - !GetAtt RGInstanceSecurityGroup.GroupId
            IpAddressType: "ipv4"
  RGHTTPSListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Condition: securecommunication
        Properties:
            LoadBalancerArn: !Ref RGApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
              - 
                CertificateArn: !Ref CertificateArn
                
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref RGTargetGroup
                Type: "forward"

  RGHTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Condition: securecommunication
        Properties:
            LoadBalancerArn: !Ref RGApplicationLoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig: 
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"
  RGTargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref VPC
            Name: "Rg-target-group-1"
            HealthCheckEnabled: true
  RGHTTPListener1:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Condition: nonsecurecommunication
        Properties:
            DefaultActions:
              - Type: "forward"
                TargetGroupArn: !Ref RGTargetGroup
            Port: 80
            Protocol: "HTTP"
            LoadBalancerArn: !Ref RGApplicationLoadBalancer
           
Outputs:        
  Applicationloadbalancer:
    Description: The created loadbalancer
    Value: !Ref RGApplicationLoadBalancer
  TargetGroup:
    Description: The created TargetGroup 
    Value: !Ref RGTargetGroup
  LoadBalancerSecurityGroup:
    Description: The securty group for the ALB
    Value: !Ref RGInstanceSecurityGroup
    
