AWSTemplateFormatVersion: 2010-09-09

Description: This stack provisions resources necessary to use this AWS account with RG.

Parameters:
  EnableTRE:
    Type: String
    AllowedValues: [true, false]
    Description: Onboard this account to support Trusted Research Environment

  EnableFlowLogs:
    Type: String
    AllowedValues: [true, false]
    Description: Enable flow logs on VPCs and Subnets created on this account

  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names

  VpcCidr:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetCidr1:
    Description: Please enter the IP range (CIDR notation) for the public subnet 1.
    Type: String
    Default: 10.0.0.0/19

  PublicSubnetCidr2:
    Description: Please enter the IP range (CIDR notation) for the public subnet 1.
    Type: String
    Default: 10.0.32.0/19

  #------------TRE Parameters Below-------
  WorkspaceSubnetCidr:
    Description: Please enter the IP range (CIDR notation) for the Workspace subnet. This value is only used if TRE is enabled.
    Type: String
    Default: 10.0.64.0/19


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Shared Configuration
        Parameters:
          - Namespace
      - Label:
          default: Deployment Configuration
        Parameters:
          - VpcCidr
          - PublicSubnetCidr1
          - PublicSubnetCidr2

# Resources linked to TRE conditions are evaluated further prior to getting sent to CloudFormation
Conditions:
  isTREEnabled: !Equals
    - !Ref EnableTRE
    - true
  isTREDisabled: !Not [Condition: isTREEnabled]
  enableFlowLogs: !Equals [!Ref EnableFlowLogs, true]
  enableFlowLogsNonTRE: !And [Condition: isTREDisabled, Condition: enableFlowLogs]
  enableFlowLogsWithTRE: !And [Condition: isTREEnabled, Condition: enableFlowLogs]

Resources:
  # VPC for launching resources into
  # Just one AZ as we're aiming for transient low-cost clusters rather than HA
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} vpc

  FlowLogVPC:
    Type: AWS::EC2::FlowLog
    Condition: enableFlowLogs
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ACCEPT
      LogGroupName: !Ref FlowLogCloudwatchGroup
      LogFormat: '${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr}'
      Tags:
        - Key: Name
          Value: FlowLogForVPC
        - Key: Purpose
          Value: AcceptTraffic

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} public subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} public subnet 2

  FlowLogPublicSubnet1:
    Type: AWS::EC2::FlowLog
    Condition: enableFlowLogsNonTRE
    Properties:
      ResourceId: !Ref PublicSubnet1
      ResourceType: Subnet
      TrafficType: ACCEPT
      LogGroupName: !Ref FlowLogCloudwatchGroup
      LogFormat: '${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr}'
      Tags:
        - Key: Name
          Value: FlowLogForPublicSubnet1
        - Key: Purpose
          Value: AcceptTraffic
  
  FlowLogPublicSubnet1:
    Type: AWS::EC2::FlowLog
    Condition: enableFlowLogsNonTRE
    Properties:
      ResourceId: !Ref PublicSubnet2
      ResourceType: Subnet
      TrafficType: ACCEPT
      LogGroupName: !Ref FlowLogCloudwatchGroup
      LogFormat: '${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr}'
      Tags:
        - Key: Name
          Value: FlowLogForPublicSubnet2
        - Key: Purpose
          Value: AcceptTraffic

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} public routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'This is the key used to secure resources in this account'
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow root access
            Effect: 'Allow'
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key by this account
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:CreateGrant'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref 'AWS::AccountId'

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join ['', ['alias/', Ref: Namespace, '-encryption-key']]
      TargetKeyId: !Ref EncryptionKey

  FlowLogCloudwatchGroup:
    Type: 'AWS::Logs::LogGroup'
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Join ['', [Ref: Namespace, '-flow-logger']]
      RetentionInDays: 30

  #------------TRE Resources Below-------
  PrivateWorkspaceSubnet:
    Type: AWS::EC2::Subnet
    Condition: isTREEnabled
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref WorkspaceSubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Workspace Subnet

  FlowLogPrivateWorkspaceSubnet:
    Type: AWS::EC2::FlowLog
    Condition: enableFlowLogsWithTRE
    Properties:
      ResourceId: !Ref PrivateWorkspaceSubnet
      ResourceType: Subnet
      TrafficType: ACCEPT
      LogGroupName: PrivateWorkspaceSubnetLogGroup
      LogFormat: '${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr}'
      Tags:
        - Key: Name
          Value: FlowLogForPrivateWorkspaceSubnet
        - Key: Purpose
          Value: AcceptTraffic

  PrivateWorkspaceRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: isTREEnabled
    Properties:
      VpcId: !Ref VPC

  WorkspaceSubnetAssociationRouteTable:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: isTREEnabled
    Properties:
      SubnetId: !Ref PrivateWorkspaceSubnet
      RouteTableId: !Ref PrivateWorkspaceRouteTable

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpoint.html
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: isTREEnabled
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:GetObjectTagging'
              - 's3:GetObjectTorrent'
              - 's3:GetObjectVersion'
              - 's3:GetObjectVersionTagging'
              - 's3:GetObjectVersionTorrent'
              - 's3:AbortMultipartUpload'
              - 's3:ListMultipartUploadParts'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
              - 's3:PutObjectTagging'
              - 's3:PutObjectVersionTagging'
              - 's3:DeleteObject'
              - 's3:DeleteObjectTagging'
              - 's3:DeleteObjectVersion'
              - 's3:DeleteObjectVersionTagging'
              - 's3:ListBucket' # Required in get_bootstrap.sh when running `aws s3 sync`
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PrivateWorkspaceRouteTable
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

  S3NonTREEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:GetObjectTagging'
              - 's3:GetObjectTorrent'
              - 's3:GetObjectVersion'
              - 's3:GetObjectVersionTagging'
              - 's3:GetObjectVersionTorrent'
              - 's3:AbortMultipartUpload'
              - 's3:ListMultipartUploadParts'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
              - 's3:PutObjectTagging'
              - 's3:PutObjectVersionTagging'
              - 's3:DeleteObject'
              - 's3:DeleteObjectTagging'
              - 's3:DeleteObjectVersion'
              - 's3:DeleteObjectVersionTagging'
              - 's3:ListBucket' # Required in get_bootstrap.sh when running `aws s3 sync`
            Resource:
              - '*'
      RouteTableIds:
        - !Ref PublicRouteTable
      VpcEndpointType: Gateway
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC

  KMSEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: isTREEnabled
    Properties:
      SubnetIds:
        - !Ref PrivateWorkspaceSubnet
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.kms'
      VpcId: !Ref VPC
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  STSEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: isTREEnabled
    Properties:
      SubnetIds:
        - !Ref PrivateWorkspaceSubnet
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sts'
      VpcId: !Ref VPC
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  EC2Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: isTREEnabled
    Properties:
      SubnetIds:
        - !Ref PrivateWorkspaceSubnet
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcId: !Ref VPC
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  CfnEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: isTREEnabled
    Properties:
      SubnetIds:
        - !Ref PrivateWorkspaceSubnet
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      VpcId: !Ref VPC
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  WorkspaceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: isTREEnabled
    Properties:
      GroupDescription: 'Security Group for TRE instances to connect with environments, and for environments to connect with interface endpoints'
      GroupName: 'Workspace-SG'
      VpcId: !Ref VPC

  WorkspaceSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: isTREEnabled
    Properties:
      GroupId: !Ref WorkspaceSecurityGroup
      SourceSecurityGroupId: !Ref EntryPointSecurityGroup
      Description: 'Allow internet ingress to environments'
      IpProtocol: '-1'

  WorkspaceSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: isTREEnabled
    Properties:
      GroupId: !Ref WorkspaceSecurityGroup
      DestinationSecurityGroupId: !Ref InterfaceEndpointSecurityGroup
      Description: 'Allow Interface Endpoint egress from environments'
      IpProtocol: '-1'

  InterfaceEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: isTREEnabled
    Properties:
      GroupDescription: 'Security Group for interface endpoints'
      GroupName: 'Interface-Endpoint-SG'
      VpcId: !Ref VPC

  InterfaceEndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: isTREEnabled
    Properties:
      GroupId: !Ref InterfaceEndpointSecurityGroup
      SourceSecurityGroupId: !Ref WorkspaceSecurityGroup
      Description: 'Allow environment ingress from interface endpoints'
      IpProtocol: '-1'

  SSMEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      SubnetIds:
        - !Ref PrivateWorkspaceSubnet
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcId: !Ref VPC
      SecurityGroupIds:
        - !Ref InterfaceEndpointSecurityGroup

  # Creating entry point security group which will allow secure traffic from outside
  EntryPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: isTREEnabled
    Properties:
      GroupDescription: 'RG Entry Point Security Group'
      GroupName: 'EntryPointSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: '-1'
        - DestinationSecurityGroupId: !Ref WorkspaceSecurityGroup
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'


Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC

  VpcPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
  
  VpcPublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  EncryptionKeyArn:
    Description: KMS Encryption Key Arn
    Value: !GetAtt [EncryptionKey, Arn]

  PublicRouteTableId:
    Description: The public route table assigned to the workspace VPC
    Value: !Ref PublicRouteTable

  S3NonTREVPCE:
    Description: S3 interface endpoint
    Value: !Ref S3NonTREEndpoint
    Export:
      Name: !Join [ '', [ Ref: Namespace, '-S3NonTREVPCE' ] ]

  #------------TRE Output Below-------

  PrivateWorkspaceSubnet:
    Description: Workspace subnet
    Condition: isTREEnabled
    Value: !Ref PrivateWorkspaceSubnet

  EntryPointSecurityGroup:
    Description: Entry Point Security Group
    Condition: isTREEnabled
    Value: !Ref EntryPointSecurityGroup
    Export:
      Name: !Join ['', [Ref: Namespace, '-RgEntryPointSG']]

  InterfaceEndpointSG:
    Description: Security group of Interface endpoints
    Condition: isTREEnabled
    Value: !Ref InterfaceEndpointSecurityGroup
    Export:
      Name: !Join ['', [Ref: Namespace, '-InterfaceEndpointSG']]

  WorkspaceSG:
    Description: Security Group for TRE instances to connect with environments, and for environments to connect with interface endpoints
    Condition: isTREEnabled
    Value: !Ref WorkspaceSecurityGroup
    Export:
      Name: !Join ['', [Ref: Namespace, '-WorkspaceSG']]

  S3TREVPCE:
    Description: S3 interface endpoint
    Condition: isTREEnabled
    Value: !Ref S3Endpoint
    Export:
      Name: !Join [ '', [ Ref: Namespace, '-S3TREVPCE' ] ]