Metadata: 
  License: Apache-2.0
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template to create an GPU based EC2 instance with NICE DCV pre installed.'


Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts
  InstanceType:
    Description: Choose the instance type e.g t3.medium (2vCPU , 2GiB RAM), t3.large (2vCPU, 8GiB RAM), t3.xlarge(4vCPU, 16GiB RAM)
    Type: String
    Default: t3.medium
    AllowedValues:
      [
        t3.medium,
        t3.large,
        t3.xlarge,
        
      ]
    ConstraintDescription: must be a valid EC2 instance type.
  EBSVolumeSize:
    Description: The initial size of the volume (in GBs)  EBS will use for storage.
    Type: Number
    Default: 32  
  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance. If no key pairs exist, please create one from the button next to the dropdown. Please contact your Administrator if you are unable to create one.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AllowedIpAddress:
    Description: The IP address range that can be used to SSH to instance and Connect to DCV
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AvailabilityZone:
    Description: Select the availability zone in which to create the instance. If you plan to attach a secondary volume to the instance, create this instance in the same AvailabilityZone as the volume you created.
    Type: AWS::EC2::AvailabilityZone::Name    

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']

Resources:  
  SSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [Ref: Namespace, "SSM-Policy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:DescribeParameters
            Resource: "*"
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]
            PolicyDocument: !Ref IamPolicyDocument
      ManagedPolicyArns:
        - Ref: SSMPolicy

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join ['-', [Ref: Namespace, 'ec2-profile']]
      Path: '/'
      Roles:
        - Ref: IAMRole

  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - config1
            - config2
        config1:
          files:
            "/home/ec2-user/.config/autostart/studymount.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/mount_study.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=Study-Mounting
                Comment=Study Mounting
            "/home/ec2-user/.config/autostart/jupyter.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/jupyter.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=JupyterLab
                Comment=Icon for Jupyter
            "/home/ec2-user/.config/autostart/rstudio.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/rstudio.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=rstudio-server
                Comment=Icon for rstudio              
            
              
            "/home/ec2-user/rstudio.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/bash
                url="http://localhost:8787/"
                link_name="RStudio"
                custom_icon="/home/ec2-user/logos/black.png"
                mkdir -p $HOME/Desktop
                desktop_file="$HOME/Desktop/rstudio.desktop"
                cat > "$desktop_file" <<EOL
                [Desktop Entry]
                Name=$link_name
                Type=Link
                URL=$url
                Icon=$custom_icon
                EOL
                chmod +x "$desktop_file"   
            "/home/ec2-user/Jupyter.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/bash
                
                sleep 2
                jtoken=$(docker exec jupyterlab /bin/bash -c "jupyter server list" 2>&1 | grep token | awk '{print $2}' | sed 's/.*=//')

                if [ -n "$jtoken" ]; then
 
                    echo "Token value: $jtoken"
                else
                    echo "Error: Unable to retrieve the Jupyter token."
                fi
                url="http://127.0.0.1:8888/?token=$jtoken"
                link_name="JupyterLab"
                custom_icon="/home/ec2-user/logos/main-logo.svg"
                mkdir -p $HOME/Desktop
                desktop_file="$HOME/Desktop/jupyter.desktop"
                cat > "$desktop_file" <<EOL
                [Desktop Entry]
                Name=$link_name
                Type=Link
                URL=$url
                Icon=$custom_icon
                EOL
                chmod +x "$desktop_file"     
            "/home/ec2-user/mount_study.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/sh
                set -x
                # Adding sleep to avoid mounting failure
                sleep 30
                mount_s3.sh 2>&1 >> /home/ec2-user/mount_s3.log
            "/home/ec2-user/set_user_token.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/bash
                # trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource EC2Instance --region ${AWS::Region} --stack ${AWS::StackName}' ERR
                region=$(curl -s "http://169.254.169.254/latest/meta-data/placement/region")
                instance_id=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")
                session_id="rg-session"
                auth_token=`uuidgen`
                parameter_name="/RL/RG/nice-dcv/auth-token/$instance_id"
                aws ssm put-parameter --name "$parameter_name" --type "String" --value '{"auth_token":"'$auth_token'","session_id":"'$session_id'"}' --region $region --overwrite
                echo "User token set successfully"
            "/home/ec2-user/supervisor/supervisord.conf":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [unix_http_server]
                file=/home/ec2-user/supervisor/supervisor.sock   ; the path to the socket file

                [supervisord]
                logfile=/home/ec2-user/supervisor/supervisord.log ; main log file; default $CWD/supervisord.log
                logfile_maxbytes=50MB                  ; max main logfile bytes b4 rotation; default 50MB
                logfile_backups=10                     ; # of main logfile backups; 0 means none, default 10
                loglevel=info                          ; log level; default info; others: debug,warn,trace
                pidfile=/home/ec2-user/supervisor/supervisord.pid ; supervisord pidfile; default supervisord.pid
                nodaemon=false                         ; start in foreground if true; default false
                minfds=1024                            ; min. avail startup file descriptors; default 1024
                minprocs=200                           ; min. avail process descriptors;default 200

                [rpcinterface:supervisor]
                supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

                [supervisorctl]
                serverurl=unix:///home/ec2-user/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket

                [program:dcv-custom-auth]
                command=docker run -p 8445:8445 -e PORT=8445 -e PARAMNAMEPREFIX=/RL/RG/nice-dcv/auth-token/ relevancelab/nice-dcv-auth-svc:1.0.0  ; the program (relative uses PATH, can take args)
                directory=/home/ec2-user                                                                                                            ; directory to cwd to before exec (def no cwd)
                user=ec2-user                                                                                                                       ; setuid to this UNIX account to run the program
                redirect_stderr=true                                                                                                                ; redirect proc stderr to stdout (default false)
                stdout_logfile=/home/ec2-user/supervisor/cust_auth.log
            "/home/ec2-user/supervisor/supervisord.log":
              content: "\n"
              mode: "000664"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/supervisor/cust_auth.log":
              content: "\n"
              mode: "000664"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/disable_lock.sh":
              content: !Sub |
                #!/bin/bash
                gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'
                echo "Lock disabled successfully"
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/themes.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/sh
                set -x
                sleep 60
                export DBUS_SESSION_BUS_ADDRESS=$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep mate-session)/environ|cut -d= -f2- | tr -d '\0')
                gsettings set org.mate.interface gtk-theme "Graphite-Light"
                gsettings set org.mate.background picture-filename "/home/ec2-user/Graphite-gtk-theme-main/wallpaper/Graphite/wave-color.png"
        config2:
          commands:
            01_start_ext_auth:
              cwd: "/home/ec2-user/supervisor"
              command: "/usr/local/bin/supervisord"
            02_set_user_token:
              cwd: "/home/ec2-user"
              command: "/home/ec2-user/set_user_token.sh"
                                       
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          # trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource EC2Instance --region ${AWS::Region} --stack ${AWS::StackName}' ERR
          # Download and execute bootstrap script
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/get_bootstrap.sh" "/tmp"
          chmod 500 "/tmp/get_bootstrap.sh"
          /tmp/get_bootstrap.sh "${EnvironmentInstanceFiles}" '${S3Mounts}' "${AWS::Region}"  

          # Install supervisor and start on boot
          pip3 install supervisor crudini

          # Route auth request to external authenticator and restart dcv
          /usr/local/bin/crudini --set /etc/dcv/dcv.conf security auth-token-verifier \"http://127.0.0.1:8445\"
          #/usr/local/bin/crudini --set /etc/dcv/dcv.conf clipboard primary-selection-copy false 
          systemctl restart dcvserver

          # Create dcv session start script
          cat << 'EOF' > /usr/local/bin/start-dcv-session
           #!/bin/bash
            service_name="dcvserver"
            timeout=20
            elapsed_time=0

            echo "Waiting for $service_name to become active..."

            while true; do
            status=$(systemctl is-active $service_name)
            if [[ $status == "active" ]]; then
              echo "$service_name is now active."
              break
            fi

            if [[ $elapsed_time -ge $timeout ]]; then
              echo "Timeout: $service_name did not become active within $timeout seconds."
              break
            fi

            sleep 1
            elapsed_time=$((elapsed_time+1))
            done
          dcv create-session rg-session --name rg-session --user ec2-user --owner ec2-user
          dcv list-sessions
          date
          EOF

          # Create dcv session on reboot
          chown root: "/usr/local/bin/start-dcv-session"
          chmod 775 "/usr/local/bin/start-dcv-session"
          sh "/usr/local/bin/start-dcv-session"

          # # Download and execute bootstrap script
          # aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/get_bootstrap.sh" "/tmp"
          # chmod 500 "/tmp/get_bootstrap.sh"
          # /tmp/get_bootstrap.sh "${EnvironmentInstanceFiles}" '${S3Mounts}' "${AWS::Region}"          

          sleep 5
          docker run -d --restart always -e PASSWORD=Pass@123 -v /home/ec2-user:/home/ec2-user -p 8787:8787 relevancelab/rstudio_4.2.1:1.0.3
          docker run -d --restart always --name jupyterlab -p 8888:8888 -v /home/ec2-user:/home/ec2-user relevancelab/jupiterlab_3.5.0:1.0.3

          # Run init script to create files
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

          # Add command to start on reboot
          crontab -l 2>/dev/null > "/tmp/crontab"
          sh "/usr/local/bin/start-dcv-session"
          echo '@reboot systemctl start dcvserver' >> "/tmp/crontab"
          echo '@reboot cd /home/ec2-user/supervisor && /usr/local/bin/supervisord 2>&1 >> /home/ec2-user/supervisor/cust_auth.log' >> "/tmp/crontab"
          echo '@reboot sleep 5' >> "/tmp/crontab"
          echo '@reboot /usr/local/bin/start-dcv-session 2>&1 >> /var/log/start-dcv-session.log' >> "/tmp/crontab"
          echo '@reboot /home/ec2-user/set_user_token.sh 2>&1 >> /var/log/set_user_token.log' >> "/tmp/crontab"
          crontab "/tmp/crontab"
          # Restart DCV session
          #dcv close-session rg-session
          #sh "/usr/local/bin/start-dcv-session"

          # Remove password and lock for ec2-user
          passwd -l ec2-user
          dcv create-session lock-session --name lock-session --user ec2-user --owner ec2-user --init /home/ec2-user/disable_lock.sh

          sudo -u ec2-user /home/ec2-user/themes.sh
          sudo -u ec2-user /home/ec2-user/rstudio.sh
          sudo -u ec2-user /home/ec2-user/Jupyter.sh
          dcv list-sessions


          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyPair'
      AvailabilityZone: !Ref AvailabilityZone
      ImageId: "{{resolve:ssm:/RL/RG/StandardCatalog/linux-nice-dcv-ami}}"
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            Encrypted: true
            
      

      PropagateTagsToVolumeOnCreation: true
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Namespace, 'ec2-linux']]
        - Key: Description
          Value: EC2 workspace instance
        - Key: cost_resource
          Value: !Sub ${AWS::StackName}
    
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'AllowedIpAddress'
      - IpProtocol: tcp
        FromPort: '8443'
        ToPort: '8443'
        CidrIp: !Ref 'AllowedIpAddress'

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  InstanceDNSName:
    Description: DNS name of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  ApplicationPort:
    Description: The Port in which the application is running
    Value: '8443'
  AvailabilityZone: 
    Description: AvailabilityZone of newly created EC2 instance
    Value: !Ref AvailabilityZone