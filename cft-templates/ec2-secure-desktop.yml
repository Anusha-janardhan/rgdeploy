Metadata:
  License: Apache-2.0
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template to create an GPU based EC2 instance with NICE-DCV pre installed."

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket, and prefix properties used to mount data
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation
  VPC:
    Description: The VPC in which the EC2 instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the EC2 instance will reside
    Type: AWS::EC2::Subnet::Id
  ALBSecurityGroup:
    Description: Security Group Id of the ALB to which the EC2 instance traffic will be allowed from
    Type: AWS::EC2::SecurityGroup::Id    
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts
  InstanceType:
    Description: Choose the instance type for this instance. e.g. t3.medium
    Type: String
    Default: t3.medium
    AllowedValues:
      [
        t3.medium,
        t3.xlarge,
        t3.2xlarge,
        g4dn.xlarge,
        g4dn.2xlarge,
        g4dn.4xlarge,
        g4dn.8xlarge,
        g4dn.12xlarge,
        g4dn.16xlarge,
        g4dn.metal,
        g3.4xlarge,
        g3.8xlarge,
        g3.16xlarge,
      ]
    ConstraintDescription: must be a valid EC2 instance type.
  EBSVolumeSize:
    Description: The initial size of the volume (in GBs)  EBS will use for storage.
    Type: Number
    Default: 32  

  AllowedIpAddress:
    Description: The IP address range that can be used to SSH to instance and Connect to DCV
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, "{}"]

Resources:
  SSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [Ref: Namespace, "SSM-Policy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:DescribeParameters
            Resource: "*"
  IAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ["-", [Ref: Namespace, "ec2-role"]]
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref "AWS::NoValue"
          - PolicyName: !Join ["-", [Ref: Namespace, "s3-studydata-policy"]]
            PolicyDocument: !Ref IamPolicyDocument
      ManagedPolicyArns:
        - Ref: SSMPolicy
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Join ["-", [Ref: Namespace, "ec2-profile"]]
      Path: "/"
      Roles:
        - Ref: IAMRole
  enKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption Key"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: enKeyPolicy
        Statement:
          - Sid: Allow all users to use this key
            Effect: Allow
            Principal: "*"
            Action:
              - kms:*
            Resource: "*"           

  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - config1
            - config2
        config1:
          files:
            "/home/ec2-user/.config/autostart/studymount.desktop":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [Desktop Entry]
                Type=Application
                Exec="/home/ec2-user/mount_study.sh"
                Hidden=false
                NoDisplay=false
                X-GNOME-Autostart-enabled=true
                Terminal=true
                Name=Study-Mounting
                Comment=Study Mounting
            "/home/ec2-user/mount_study.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/sh
                set -x
                # Adding sleep to avoid mounting failure
                sleep 30
                mount_s3.sh 2>&1 >> /home/ec2-user/mount_s3.log
            "/home/ec2-user/set_user_token.sh":
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
              content: !Sub |
                #!/bin/bash
                # trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource EC2Instance --region ${AWS::Region} --stack ${AWS::StackName}' ERR
                region=$(curl -s "http://169.254.169.254/latest/meta-data/placement/region")
                instance_id=$(curl -s "http://169.254.169.254/latest/meta-data/instance-id")
                session_id="rg-session"
                auth_token=`uuidgen`
                parameter_name="/RL/RG/secure-desktop/auth-token/$instance_id"
                aws ssm put-parameter --name "$parameter_name" --type "String" --value '{"auth_token":"'$auth_token'","session_id":"'$session_id'"}' --region $region --overwrite
                echo "User token set successfully"
            "/home/ec2-user/supervisor/supervisord.conf":
              mode: "000644"
              owner: "ec2-user"
              group: "ec2-user"
              content: |
                [unix_http_server]
                file=/home/ec2-user/supervisor/supervisor.sock   ; the path to the socket file

                [supervisord]
                logfile=/home/ec2-user/supervisor/supervisord.log ; main log file; default $CWD/supervisord.log
                logfile_maxbytes=50MB                  ; max main logfile bytes b4 rotation; default 50MB
                logfile_backups=10                     ; # of main logfile backups; 0 means none, default 10
                loglevel=info                          ; log level; default info; others: debug,warn,trace
                pidfile=/home/ec2-user/supervisor/supervisord.pid ; supervisord pidfile; default supervisord.pid
                nodaemon=false                         ; start in foreground if true; default false
                minfds=1024                            ; min. avail startup file descriptors; default 1024
                minprocs=200                           ; min. avail process descriptors;default 200

                [rpcinterface:supervisor]
                supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

                [supervisorctl]
                serverurl=unix:///home/ec2-user/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket

                [program:dcv-custom-auth]
                command=docker run -p 8445:8445 -e PORT=8445 -e PARAMNAMEPREFIX=/RL/RG/secure-desktop/auth-token/ relevancelab/nice-dcv-auth-svc:1.0.0  ; the program (relative uses PATH, can take args)
                directory=/home/ec2-user                                                                                                            ; directory to cwd to before exec (def no cwd)
                user=ec2-user                                                                                                                       ; setuid to this UNIX account to run the program
                redirect_stderr=true                                                                                                                ; redirect proc stderr to stdout (default false)
                stdout_logfile=/home/ec2-user/supervisor/cust_auth.log
            "/home/ec2-user/supervisor/supervisord.log":
              content: "\n"
              mode: "000664"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/supervisor/cust_auth.log":
              content: "\n"
              mode: "000664"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/disable_lock.sh":
              content: !Sub |
                #!/bin/bash
                gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true'
                echo "Lock disabled successfully"
              mode: "000755"
              owner: "ec2-user"
              group: "ec2-user"
        config2:
          commands:
            01_start_ext_auth:
              cwd: "/home/ec2-user/supervisor"
              command: "/usr/local/bin/supervisord"
            02_set_user_token:
              cwd: "/home/ec2-user"
              command: "/home/ec2-user/set_user_token.sh"
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          # trap '/opt/aws/bin/cfn-signal --exit-code 1 --resource EC2Instance --region ${AWS::Region} --stack ${AWS::StackName}' ERR
          
          # Copy environment instance files needed for the workspace
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/secure_desktop/secure_desktop.perm" "/etc/dcv/"

          # Install supervisor and start on boot
          pip3 install supervisor crudini

          # Route auth request to external authenticator and restart dcv
          /usr/local/bin/crudini --set /etc/dcv/dcv.conf security auth-token-verifier \"http://127.0.0.1:8445\"
          
          systemctl restart dcvserver

          # Create dcv session start script
          cat << EOF > /usr/local/bin/start-dcv-session
          dcv create-session rg-session --name rg-session --user ec2-user --owner ec2-user --permissions-file /etc/dcv/secure_desktop.perm
          EOF

          # Create dcv session on reboot
          chown root: "/usr/local/bin/start-dcv-session"
          chmod 775 "/usr/local/bin/start-dcv-session"
          sh "/usr/local/bin/start-dcv-session"

          sleep 5

          # Run init script to create files
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

          # Add command to start on reboot
          crontab -l 2>/dev/null > "/tmp/crontab"
          sh "/usr/local/bin/start-dcv-session"
          echo '@reboot cd /home/ec2-user/supervisor && /usr/local/bin/supervisord 2>&1 >> /home/ec2-user/supervisor/cust_auth.log' >> "/tmp/crontab"
          echo '@reboot /usr/local/bin/start-dcv-session 2>&1 >> /var/log/start-dcv-session.log' >> "/tmp/crontab"
          echo '@reboot /home/ec2-user/set_user_token.sh 2>&1 >> /var/log/set_user_token.log' >> "/tmp/crontab"
          crontab "/tmp/crontab"
          # Restart DCV session to start dcv-session
          dcv close-session rg-session
          sh "/usr/local/bin/start-dcv-session"

          # Remove password and lock for ec2-user
          passwd -l ec2-user
          dcv create-session lock-session --name lock-session --user ec2-user --owner ec2-user --init /home/ec2-user/disable_lock.sh

          # Download and execute bootstrap script
          aws s3 cp --region "${AWS::Region}" "${EnvironmentInstanceFiles}/get_bootstrap.sh" "/tmp"
          chmod 500 "/tmp/get_bootstrap.sh"
          /tmp/get_bootstrap.sh "${EnvironmentInstanceFiles}" '${S3Mounts}' "${AWS::Region}"

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

      InstanceType: !Ref "InstanceType"
      
      ImageId: "{{resolve:ssm:/RL/RG/StandardCatalog/linux-nice-dcv-ami}}"
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EBSVolumeSize
            Encrypted: true
            KmsKeyId: !Ref enKey      
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref InstanceSecurityGroup
          SubnetId: !Ref Subnet            
      PropagateTagsToVolumeOnCreation: true
      Tags:
        - Key: Name
          Value: !Join ["-", [Ref: Namespace, "ec2-linux"]]
        - Key: Description
          Value: EC2 workspace instance
        - Key: cost_resource
          Value: !Sub ${AWS::StackName}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 workspace security group          
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443      
          SourceSecurityGroupId: !Ref ALBSecurityGroup          
      VpcId: !Ref VPC
          
          
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref "EC2Instance"
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  InstanceDNSName:
    Description: DNS name of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  ApplicationPort:
    Description: The Port in which the application is running
    Value: "8443"
  AvailabilityZone: 
    Description: AvailabilityZone of newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]  